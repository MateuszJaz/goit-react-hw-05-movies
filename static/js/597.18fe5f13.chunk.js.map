{"version":3,"file":"static/js/597.18fe5f13.chunk.js","mappings":"8SACAA,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAU,mCAEHC,EAAkB,mCAAG,8FACnBF,EAAAA,EAAAA,IAAA,qCAAwCC,IADrB,mFAAH,qDAIlBE,EAAiB,mCAAG,WAAMC,GAAN,iFAClBJ,EAAAA,EAAAA,IAAA,gBAAmBI,EAAnB,oBAAuCH,IADrB,mFAAH,sDAIjBI,EAAiB,mCAAG,WAAMD,GAAN,iFAClBJ,EAAAA,EAAAA,IAAA,gBAAmBI,EAAnB,4BAA+CH,IAD7B,mFAAH,sDAIjBK,EAAiB,mCAAG,WAAMF,GAAN,iFAClBJ,EAAAA,EAAAA,IAAA,gBACFI,EADE,4BAC0BH,EAD1B,2BADkB,mFAAH,sDAMjBM,EAAoB,mCAAG,WAAMC,GAAN,iFACrBR,EAAAA,EAAAA,IAAA,+BACaC,EADb,iCAC6CO,EAD7C,gCADqB,mFAAH,qD,6ECoBjC,UAtCa,WACX,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwCE,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KAQA,OANAC,EAAAA,EAAAA,YAAU,YACRX,EAAAA,EAAAA,IAAkBI,GACfQ,MAAK,SAAAC,GAAQ,OAAIL,EAAgBK,EAASC,KAAKC,KAAlC,IACbC,OAAM,SAAAP,GAAK,OAAIC,EAASD,EAAMQ,QAAnB,GACf,GAAE,CAACb,KAGF,8BACGG,IAAiBE,GAChB,wBACGF,EAAaW,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,aAAxB,OAChB,2BACE,gBACEC,IACED,EAAY,0CAC2BA,GAD3B,sHAIdE,MAAO,IACPC,IAAKL,KAEP,wBAAKA,KACL,gCAAQC,OAXDF,EADO,OAiBpB,uBAAIV,KAIX,C","sources":["api/tmdb.js","components/Cast.jsx"],"sourcesContent":["import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = '338552ddf479699ffa2d32656eaccc70';\n\nexport const fetchTrendingToday = async () => {\n  return await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n};\n\nexport const fetchMovieDetails = async movie_id => {\n  return await axios.get(`movie/${movie_id}?api_key=${API_KEY}`);\n};\n\nexport const fetchMovieCredits = async movie_id => {\n  return await axios.get(`movie/${movie_id}/credits?api_key=${API_KEY}`);\n};\n\nexport const fetchMovieReviews = async movie_id => {\n  return await axios.get(\n    `movie/${movie_id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n};\n\nexport const fetchMoviesWithQuery = async query => {\n  return await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n};\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { fetchMovieCredits } from 'api/tmdb';\nimport propTypes from 'prop-types';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [movieCredits, setMovieCredits] = useState('');\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    fetchMovieCredits(movieId)\n      .then(response => setMovieCredits(response.data.cast))\n      .catch(error => setError(error.message));\n  }, [movieId]);\n\n  return (\n    <>\n      {movieCredits && !error ? (\n        <ul>\n          {movieCredits.map(({ id, name, character, profile_path }) => (\n            <li key={id}>\n              <img\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w200/${profile_path}`\n                    : `https://upload.wikimedia.org/wikipedia/commons/thumb/a/ad/Placeholder_no_text.svg/100px-Placeholder_no_text.svg.png`\n                }\n                width={100}\n                alt={name}\n              />\n              <h4>{name}</h4>\n              <p>as: {character}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>{error}</p>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n\nCast.propTypes = {\n  movieCredits: propTypes.arrayOf(\n    propTypes.shape({\n      id: propTypes.string,\n      name: propTypes.string,\n      character: propTypes.string,\n      profile_path: propTypes.string,\n    })\n  ),\n};\n"],"names":["axios","API_KEY","fetchTrendingToday","fetchMovieDetails","movie_id","fetchMovieCredits","fetchMovieReviews","fetchMoviesWithQuery","query","movieId","useParams","useState","movieCredits","setMovieCredits","error","setError","useEffect","then","response","data","cast","catch","message","map","id","name","character","profile_path","src","width","alt"],"sourceRoot":""}