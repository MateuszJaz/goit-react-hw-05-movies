{"version":3,"file":"static/js/134.5fb2bf4f.chunk.js","mappings":"8SACAA,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAU,mCAEHC,EAAkB,mCAAG,8FACnBF,EAAAA,EAAAA,IAAA,qCAAwCC,IADrB,mFAAH,qDAIlBE,EAAiB,mCAAG,WAAMC,GAAN,iFAClBJ,EAAAA,EAAAA,IAAA,gBAAmBI,EAAnB,oBAAuCH,IADrB,mFAAH,sDAIjBI,EAAiB,mCAAG,WAAMD,GAAN,iFAClBJ,EAAAA,EAAAA,IAAA,gBAAmBI,EAAnB,4BAA+CH,IAD7B,mFAAH,sDAIjBK,EAAiB,mCAAG,WAAMF,GAAN,iFAClBJ,EAAAA,EAAAA,IAAA,gBACFI,EADE,4BAC0BH,EAD1B,2BADkB,mFAAH,sDAMjBM,EAAoB,mCAAG,WAAMC,GAAN,iFACrBR,EAAAA,EAAAA,IAAA,+BACaC,EADb,iCAC6CO,EAD7C,gCADqB,mFAAH,qD,4ECiCjC,UAnDe,WAAO,IAAD,EACnB,GAAyCC,EAAAA,EAAAA,UAAS,MAAlD,eAAOC,EAAP,KAAsBC,EAAtB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMN,EAAK,UAAGK,EAAaE,IAAI,gBAApB,QAAgC,IAE3CC,EAAAA,EAAAA,YAAU,WACRR,IACED,EAAAA,EAAAA,IAAqBC,GAClBS,MAAK,SAAAC,GAAQ,OAAIP,EAAgBO,EAASC,KAAKC,QAAlC,IACbC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,GACjB,GAAE,CAACd,IAQJ,OACE,iCACE,kBAAMiB,UAAU,aAAaC,SARZ,SAAAC,GACnBA,EAAEC,iBACFd,EAAgB,CAAEN,MAAOmB,EAAEE,OAAOC,OAAOC,QACzCJ,EAAEE,OAAOG,OACV,EAIG,WACE,kBACEP,UAAU,kBACVQ,KAAK,SACLC,KAAK,OACLC,aAAa,MACbC,WAAS,KAEX,mBAAQF,KAAK,SAAST,UAAU,mBAAhC,UACE,iBAAMA,UAAU,wBAAhB,yBAGHf,GAA0C,IAAzBA,EAAc2B,QAC9B,wBACG3B,EAAc4B,KAAI,YAA0B,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,MAAOP,EAAW,EAAXA,KAC/B,OACE,yBACE,SAAC,KAAD,CAAMQ,GAAE,UAAKF,GAAMG,MAAO,CAAEC,KAAK,iBAAD,OAAmBnC,IAAnD,SACGgC,GAASP,KAFLM,EAMZ,MAGH7B,IAAiB,2CAIxB,C","sources":["api/tmdb.js","pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = '338552ddf479699ffa2d32656eaccc70';\n\nexport const fetchTrendingToday = async () => {\n  return await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n};\n\nexport const fetchMovieDetails = async movie_id => {\n  return await axios.get(`movie/${movie_id}?api_key=${API_KEY}`);\n};\n\nexport const fetchMovieCredits = async movie_id => {\n  return await axios.get(`movie/${movie_id}/credits?api_key=${API_KEY}`);\n};\n\nexport const fetchMovieReviews = async movie_id => {\n  return await axios.get(\n    `movie/${movie_id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n};\n\nexport const fetchMoviesWithQuery = async query => {\n  return await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n};\n","import { Link, useSearchParams } from 'react-router-dom';\nimport { fetchMoviesWithQuery } from 'api/tmdb';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\n\nconst Movies = () => {\n  const [searchResults, setSearchResult] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    query &&\n      fetchMoviesWithQuery(query)\n        .then(response => setSearchResult(response.data.results))\n        .catch(error => console.log(error));\n  }, [query]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setSearchParams({ query: e.target.search.value });\n    e.target.reset();\n  };\n\n  return (\n    <>\n      <form className=\"searchForm\" onSubmit={handleSubmit}>\n        <input\n          className=\"searchFormInput\"\n          name=\"search\"\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n        />\n        <button type=\"submit\" className=\"searchFormButton\">\n          <span className=\"searchFormButtonLabel\">Search</span>\n        </button>\n      </form>\n      {searchResults && searchResults.length !== 0 ? (\n        <ul>\n          {searchResults.map(({ id, title, name }) => {\n            return (\n              <li key={id}>\n                <Link to={`${id}`} state={{ from: `/movies?query=${query}` }}>\n                  {title || name}\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        searchResults && <p>Nothing found</p>\n      )}\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["axios","API_KEY","fetchTrendingToday","fetchMovieDetails","movie_id","fetchMovieCredits","fetchMovieReviews","fetchMoviesWithQuery","query","useState","searchResults","setSearchResult","useSearchParams","searchParams","setSearchParams","get","useEffect","then","response","data","results","catch","error","console","log","className","onSubmit","e","preventDefault","target","search","value","reset","name","type","autoComplete","autoFocus","length","map","id","title","to","state","from"],"sourceRoot":""}